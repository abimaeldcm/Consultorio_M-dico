// <auto-generated />
using System;
using Consultorio.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Consultorio.Infra.Data.Migrations
{
    [DbContext(typeof(ConsultorioDbContext))]
    [Migration("20240403015409_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Consultorio.Domain.Entity.Consult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Convenio")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.Property<int>("IdService")
                        .HasColumnType("int");

                    b.Property<string>("IdentifiedGoogleCalendar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPatient");

                    b.HasIndex("IdService");

                    b.ToTable("Consults");
                });

            modelBuilder.Entity("Consultorio.Domain.Entity.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegisterCRM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdSpeciality");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rua dos Bobos, Nº 0",
                            BirthDate = new DateTime(1997, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 4,
                            CPF = "06445663225",
                            Email = "AntonioCaudas@email.com",
                            IdSpeciality = 1,
                            LastName = "Pereira Caudas",
                            Name = "Antônio",
                            PhoneNumber = "86995287928",
                            RegisterCRM = "12345/PI"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Av. Brasil, Nº 100",
                            BirthDate = new DateTime(1985, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 7,
                            CPF = "09876543210",
                            Email = "joao.silva@email.com",
                            IdSpeciality = 2,
                            LastName = "da Silva",
                            Name = "João",
                            PhoneNumber = "86995554433",
                            RegisterCRM = "54321/PI"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Rua das Flores, Nº 50",
                            BirthDate = new DateTime(1976, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 5,
                            CPF = "11223344556",
                            Email = "maria.oliveira@email.com",
                            IdSpeciality = 2,
                            LastName = "Oliveira",
                            Name = "Maria",
                            PhoneNumber = "869944332211",
                            RegisterCRM = "67890/PI"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Av. Principal, Nº 300",
                            BirthDate = new DateTime(1990, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 6,
                            CPF = "55443322111",
                            Email = "carlos.souza@email.com",
                            IdSpeciality = 4,
                            LastName = "Souza",
                            Name = "Carlos",
                            PhoneNumber = "869966998877",
                            RegisterCRM = "13579/PI"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Rua da Paz, Nº 15",
                            BirthDate = new DateTime(1983, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 5,
                            CPF = "33445566778",
                            Email = "ana.santos@email.com",
                            IdSpeciality = 5,
                            LastName = "Santos",
                            Name = "Ana",
                            PhoneNumber = "869977776655",
                            RegisterCRM = "24680/PI"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Av. Central, Nº 200",
                            BirthDate = new DateTime(1988, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 2,
                            CPF = "99887766554",
                            Email = "pedro.moraes@email.com",
                            IdSpeciality = 6,
                            LastName = "Moraes",
                            Name = "Pedro",
                            PhoneNumber = "869988887766",
                            RegisterCRM = "97531/PI"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Rua das Árvores, Nº 30",
                            BirthDate = new DateTime(1980, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 5,
                            CPF = "22113344556",
                            Email = "fernanda.costa@email.com",
                            IdSpeciality = 7,
                            LastName = "Costa",
                            Name = "Fernanda",
                            PhoneNumber = "869933377755",
                            RegisterCRM = "86420/PI"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Av. das Estrelas, Nº 75",
                            BirthDate = new DateTime(1995, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 4,
                            CPF = "77889900123",
                            Email = "rafaela.lima@email.com",
                            IdSpeciality = 8,
                            LastName = "Lima",
                            Name = "Rafaela",
                            PhoneNumber = "869922223344",
                            RegisterCRM = "54321/PI"
                        });
                });

            modelBuilder.Entity("Consultorio.Domain.Entity.Email.EmailEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Consultorio.Domain.Entity.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rua das Flores, Nº 10",
                            BirthDate = new DateTime(1990, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 4,
                            CPF = "12345678901",
                            Email = "maria.silva@email.com",
                            Height = 1.3600000000000001,
                            LastName = "da Silva",
                            Name = "Maria",
                            PhoneNumber = "869988776655",
                            Weight = 70.0
                        },
                        new
                        {
                            Id = 2,
                            Address = "Av. Central, Nº 50",
                            BirthDate = new DateTime(1985, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 3,
                            CPF = "23456789012",
                            Email = "jose.santos@email.com",
                            Height = 1.8,
                            LastName = "Santos",
                            Name = "José",
                            PhoneNumber = "869977665544",
                            Weight = 85.0
                        },
                        new
                        {
                            Id = 3,
                            Address = "Rua dos Pássaros, Nº 25",
                            BirthDate = new DateTime(1993, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 5,
                            CPF = "34567890123",
                            Email = "ana.souza@email.com",
                            Height = 1.6499999999999999,
                            LastName = "Souza",
                            Name = "Ana",
                            PhoneNumber = "869966554433",
                            Weight = 60.0
                        },
                        new
                        {
                            Id = 4,
                            Address = "Av. Brasil, Nº 100",
                            BirthDate = new DateTime(1980, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 6,
                            CPF = "45678901234",
                            Email = "carlos.oliveira@email.com",
                            Height = 1.7,
                            LastName = "Oliveira",
                            Name = "Carlos",
                            PhoneNumber = "869955443322",
                            Weight = 75.0
                        },
                        new
                        {
                            Id = 5,
                            Address = "Rua Principal, Nº 300",
                            BirthDate = new DateTime(1975, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 4,
                            CPF = "56789012345",
                            Email = "mariana.costa@email.com",
                            Height = 1.6000000000000001,
                            LastName = "Costa",
                            Name = "Mariana",
                            PhoneNumber = "869944332211",
                            Weight = 65.0
                        },
                        new
                        {
                            Id = 6,
                            Address = "Av. das Árvores, Nº 15",
                            BirthDate = new DateTime(1992, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 5,
                            CPF = "67890123456",
                            Email = "rafael.oliveira@email.com",
                            Height = 1.8500000000000001,
                            LastName = "Oliveira",
                            Name = "Rafael",
                            PhoneNumber = "869933221100",
                            Weight = 80.0
                        },
                        new
                        {
                            Id = 7,
                            Address = "Rua do Sol, Nº 200",
                            BirthDate = new DateTime(1987, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 2,
                            CPF = "78901234567",
                            Email = "juliana.lima@email.com",
                            Height = 1.75,
                            LastName = "Lima",
                            Name = "Juliana",
                            PhoneNumber = "869922110011",
                            Weight = 70.0
                        },
                        new
                        {
                            Id = 8,
                            Address = "Av. das Estrelas, Nº 75",
                            BirthDate = new DateTime(1996, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 5,
                            CPF = "89012345678",
                            Email = "fernando.santos@email.com",
                            Height = 1.8,
                            LastName = "Santos",
                            Name = "Fernando",
                            PhoneNumber = "869911001122",
                            Weight = 85.0
                        },
                        new
                        {
                            Id = 9,
                            Address = "Av. das Estrelas, Nº 75",
                            BirthDate = new DateTime(1997, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BloodType = 5,
                            CPF = "89012345678",
                            Email = "abimaelmends@hotmail.com",
                            Height = 1.8,
                            LastName = "Mendes",
                            Name = "Abimael",
                            PhoneNumber = "86995287928",
                            Weight = 85.0
                        });
                });

            modelBuilder.Entity("Consultorio.Domain.Entity.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Atendimento médico geral para pacientes de todas as idades.",
                            Duration = 60,
                            Name = "Clínico Geral",
                            Value = 150m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Especialidade médica que se ocupa do diagnóstico e tratamento das doenças que acometem o coração.",
                            Duration = 60,
                            Name = "Cardiologia",
                            Value = 200m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Especialidade médica dedicada à assistência à criança e ao adolescente, nos seus diversos aspectos, sejam eles preventivos ou curativos.",
                            Duration = 45,
                            Name = "Pediatria",
                            Value = 120m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Especialidade médica que cuida das doenças e deformidades dos ossos, músculos, ligamentos e articulações.",
                            Duration = 45,
                            Name = "Ortopedia",
                            Value = 180m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Especialidade médica que cuida da saúde da pele, cabelos e unhas.",
                            Duration = 30,
                            Name = "Dermatologia",
                            Value = 100m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Especialidade médica que trata das doenças relacionadas com os olhos e com a visão.",
                            Duration = 30,
                            Name = "Oftalmologia",
                            Value = 150m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Especialidade médica que lida com a prevenção, atendimento, diagnóstico, tratamento e reabilitação das diferentes formas de sofrimentos mentais, sejam elas de cunho orgânico ou funcional.",
                            Duration = 60,
                            Name = "Psiquiatria",
                            Value = 250m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Especialidade médica que trata da saúde da mulher, especialmente do sistema reprodutor feminino.",
                            Duration = 45,
                            Name = "Ginecologia",
                            Value = 180m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Especialidade médica que trata do trato urinário de homens e mulheres e do sistema reprodutor dos homens.",
                            Duration = 45,
                            Name = "Urologia",
                            Value = 200m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Especialidade médica que trata dos distúrbios estruturais do sistema nervoso.",
                            Duration = 60,
                            Name = "Neurologia",
                            Value = 220m
                        });
                });

            modelBuilder.Entity("Consultorio.Domain.Entity.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MedicalSpeciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Speciality");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicalSpeciality = "Clínico Geral"
                        },
                        new
                        {
                            Id = 2,
                            MedicalSpeciality = "Cardiologia"
                        },
                        new
                        {
                            Id = 3,
                            MedicalSpeciality = "Pediatria"
                        },
                        new
                        {
                            Id = 4,
                            MedicalSpeciality = "Ortopedia"
                        },
                        new
                        {
                            Id = 5,
                            MedicalSpeciality = "Dermatologia"
                        },
                        new
                        {
                            Id = 6,
                            MedicalSpeciality = "Oftalmologia"
                        },
                        new
                        {
                            Id = 7,
                            MedicalSpeciality = "Psiquiatria"
                        },
                        new
                        {
                            Id = 8,
                            MedicalSpeciality = "Ginecologia"
                        },
                        new
                        {
                            Id = 9,
                            MedicalSpeciality = "Urologia"
                        },
                        new
                        {
                            Id = 10,
                            MedicalSpeciality = "Neurologia"
                        });
                });

            modelBuilder.Entity("Consultorio.Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Consultorio.Domain.Entity.Consult", b =>
                {
                    b.HasOne("Consultorio.Domain.Entity.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultorio.Domain.Entity.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Consultorio.Domain.Entity.ServiceEntity", "Service")
                        .WithMany()
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Consultorio.Domain.Entity.Doctor", b =>
                {
                    b.HasOne("Consultorio.Domain.Entity.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });
#pragma warning restore 612, 618
        }
    }
}
